//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace FollowMe.AircraftGeneratorVS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AircraftGeneratorSoap", Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class AircraftGenerator : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateNewPlaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPlanesOperationCompleted;
        
        private System.Threading.SendOrPostCallback BindPlaneToFlightOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnloadBaggageOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadBaggageOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadStandartPassengersOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadVipPassengersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnloadStandartPassengersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnloadVipPassengersOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadCateringOperationCompleted;
        
        private System.Threading.SendOrPostCallback FollowMeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoStepOperationCompleted;
        
        private System.Threading.SendOrPostCallback FollowMeCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DouchedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AircraftGenerator() {
            this.Url = global::FollowMe.Properties.Settings.Default.FollowMe_AircraftGeneratorVS_AircraftGenerator;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateNewPlaneCompletedEventHandler CreateNewPlaneCompleted;
        
        /// <remarks/>
        public event GetAllPlanesCompletedEventHandler GetAllPlanesCompleted;
        
        /// <remarks/>
        public event BindPlaneToFlightCompletedEventHandler BindPlaneToFlightCompleted;
        
        /// <remarks/>
        public event UnloadBaggageCompletedEventHandler UnloadBaggageCompleted;
        
        /// <remarks/>
        public event LoadBaggageCompletedEventHandler LoadBaggageCompleted;
        
        /// <remarks/>
        public event LoadStandartPassengersCompletedEventHandler LoadStandartPassengersCompleted;
        
        /// <remarks/>
        public event LoadVipPassengersCompletedEventHandler LoadVipPassengersCompleted;
        
        /// <remarks/>
        public event UnloadStandartPassengersCompletedEventHandler UnloadStandartPassengersCompleted;
        
        /// <remarks/>
        public event UnloadVipPassengersCompletedEventHandler UnloadVipPassengersCompleted;
        
        /// <remarks/>
        public event LoadCateringCompletedEventHandler LoadCateringCompleted;
        
        /// <remarks/>
        public event FollowMeCompletedEventHandler FollowMeCompleted;
        
        /// <remarks/>
        public event DoStepCompletedEventHandler DoStepCompleted;
        
        /// <remarks/>
        public event FollowMeCompleteCompletedEventHandler FollowMeCompleteCompleted;
        
        /// <remarks/>
        public event DouchedCompletedEventHandler DouchedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/CreateNewPlane", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewPlane(string name, PlaneType type, int fuelNeed, int currentStandartPassengers, int currentVipPassengers, int currentBaggage, bool hasArrivalPassengers) {
            object[] results = this.Invoke("CreateNewPlane", new object[] {
                        name,
                        type,
                        fuelNeed,
                        currentStandartPassengers,
                        currentVipPassengers,
                        currentBaggage,
                        hasArrivalPassengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewPlaneAsync(string name, PlaneType type, int fuelNeed, int currentStandartPassengers, int currentVipPassengers, int currentBaggage, bool hasArrivalPassengers) {
            this.CreateNewPlaneAsync(name, type, fuelNeed, currentStandartPassengers, currentVipPassengers, currentBaggage, hasArrivalPassengers, null);
        }
        
        /// <remarks/>
        public void CreateNewPlaneAsync(string name, PlaneType type, int fuelNeed, int currentStandartPassengers, int currentVipPassengers, int currentBaggage, bool hasArrivalPassengers, object userState) {
            if ((this.CreateNewPlaneOperationCompleted == null)) {
                this.CreateNewPlaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewPlaneOperationCompleted);
            }
            this.InvokeAsync("CreateNewPlane", new object[] {
                        name,
                        type,
                        fuelNeed,
                        currentStandartPassengers,
                        currentVipPassengers,
                        currentBaggage,
                        hasArrivalPassengers}, this.CreateNewPlaneOperationCompleted, userState);
        }
        
        private void OnCreateNewPlaneOperationCompleted(object arg) {
            if ((this.CreateNewPlaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewPlaneCompleted(this, new CreateNewPlaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/GetAllPlanes", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Plane[] GetAllPlanes() {
            object[] results = this.Invoke("GetAllPlanes", new object[0]);
            return ((Plane[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPlanesAsync() {
            this.GetAllPlanesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllPlanesAsync(object userState) {
            if ((this.GetAllPlanesOperationCompleted == null)) {
                this.GetAllPlanesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPlanesOperationCompleted);
            }
            this.InvokeAsync("GetAllPlanes", new object[0], this.GetAllPlanesOperationCompleted, userState);
        }
        
        private void OnGetAllPlanesOperationCompleted(object arg) {
            if ((this.GetAllPlanesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPlanesCompleted(this, new GetAllPlanesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/BindPlaneToFlight", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BindPlaneToFlight(System.Guid planeId, System.Guid flightId) {
            this.Invoke("BindPlaneToFlight", new object[] {
                        planeId,
                        flightId});
        }
        
        /// <remarks/>
        public void BindPlaneToFlightAsync(System.Guid planeId, System.Guid flightId) {
            this.BindPlaneToFlightAsync(planeId, flightId, null);
        }
        
        /// <remarks/>
        public void BindPlaneToFlightAsync(System.Guid planeId, System.Guid flightId, object userState) {
            if ((this.BindPlaneToFlightOperationCompleted == null)) {
                this.BindPlaneToFlightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBindPlaneToFlightOperationCompleted);
            }
            this.InvokeAsync("BindPlaneToFlight", new object[] {
                        planeId,
                        flightId}, this.BindPlaneToFlightOperationCompleted, userState);
        }
        
        private void OnBindPlaneToFlightOperationCompleted(object arg) {
            if ((this.BindPlaneToFlightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BindPlaneToFlightCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/UnloadBaggage", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnloadBaggage(MapObject serviseZone, int weightOfBaggage) {
            object[] results = this.Invoke("UnloadBaggage", new object[] {
                        serviseZone,
                        weightOfBaggage});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnloadBaggageAsync(MapObject serviseZone, int weightOfBaggage) {
            this.UnloadBaggageAsync(serviseZone, weightOfBaggage, null);
        }
        
        /// <remarks/>
        public void UnloadBaggageAsync(MapObject serviseZone, int weightOfBaggage, object userState) {
            if ((this.UnloadBaggageOperationCompleted == null)) {
                this.UnloadBaggageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnloadBaggageOperationCompleted);
            }
            this.InvokeAsync("UnloadBaggage", new object[] {
                        serviseZone,
                        weightOfBaggage}, this.UnloadBaggageOperationCompleted, userState);
        }
        
        private void OnUnloadBaggageOperationCompleted(object arg) {
            if ((this.UnloadBaggageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnloadBaggageCompleted(this, new UnloadBaggageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/LoadBaggage", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoadBaggage(MapObject serviseZone, int weightOfBaggage) {
            object[] results = this.Invoke("LoadBaggage", new object[] {
                        serviseZone,
                        weightOfBaggage});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoadBaggageAsync(MapObject serviseZone, int weightOfBaggage) {
            this.LoadBaggageAsync(serviseZone, weightOfBaggage, null);
        }
        
        /// <remarks/>
        public void LoadBaggageAsync(MapObject serviseZone, int weightOfBaggage, object userState) {
            if ((this.LoadBaggageOperationCompleted == null)) {
                this.LoadBaggageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadBaggageOperationCompleted);
            }
            this.InvokeAsync("LoadBaggage", new object[] {
                        serviseZone,
                        weightOfBaggage}, this.LoadBaggageOperationCompleted, userState);
        }
        
        private void OnLoadBaggageOperationCompleted(object arg) {
            if ((this.LoadBaggageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadBaggageCompleted(this, new LoadBaggageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/LoadStandartPassengers", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoadStandartPassengers(MapObject serviseZone, System.Guid[] passengers) {
            object[] results = this.Invoke("LoadStandartPassengers", new object[] {
                        serviseZone,
                        passengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoadStandartPassengersAsync(MapObject serviseZone, System.Guid[] passengers) {
            this.LoadStandartPassengersAsync(serviseZone, passengers, null);
        }
        
        /// <remarks/>
        public void LoadStandartPassengersAsync(MapObject serviseZone, System.Guid[] passengers, object userState) {
            if ((this.LoadStandartPassengersOperationCompleted == null)) {
                this.LoadStandartPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadStandartPassengersOperationCompleted);
            }
            this.InvokeAsync("LoadStandartPassengers", new object[] {
                        serviseZone,
                        passengers}, this.LoadStandartPassengersOperationCompleted, userState);
        }
        
        private void OnLoadStandartPassengersOperationCompleted(object arg) {
            if ((this.LoadStandartPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadStandartPassengersCompleted(this, new LoadStandartPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/LoadVipPassengers", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoadVipPassengers(MapObject serviseZone, System.Guid[] passengers) {
            object[] results = this.Invoke("LoadVipPassengers", new object[] {
                        serviseZone,
                        passengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoadVipPassengersAsync(MapObject serviseZone, System.Guid[] passengers) {
            this.LoadVipPassengersAsync(serviseZone, passengers, null);
        }
        
        /// <remarks/>
        public void LoadVipPassengersAsync(MapObject serviseZone, System.Guid[] passengers, object userState) {
            if ((this.LoadVipPassengersOperationCompleted == null)) {
                this.LoadVipPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadVipPassengersOperationCompleted);
            }
            this.InvokeAsync("LoadVipPassengers", new object[] {
                        serviseZone,
                        passengers}, this.LoadVipPassengersOperationCompleted, userState);
        }
        
        private void OnLoadVipPassengersOperationCompleted(object arg) {
            if ((this.LoadVipPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadVipPassengersCompleted(this, new LoadVipPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/UnloadStandartPassengers", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnloadStandartPassengers(MapObject serviseZone, int countOfPassengers) {
            object[] results = this.Invoke("UnloadStandartPassengers", new object[] {
                        serviseZone,
                        countOfPassengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnloadStandartPassengersAsync(MapObject serviseZone, int countOfPassengers) {
            this.UnloadStandartPassengersAsync(serviseZone, countOfPassengers, null);
        }
        
        /// <remarks/>
        public void UnloadStandartPassengersAsync(MapObject serviseZone, int countOfPassengers, object userState) {
            if ((this.UnloadStandartPassengersOperationCompleted == null)) {
                this.UnloadStandartPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnloadStandartPassengersOperationCompleted);
            }
            this.InvokeAsync("UnloadStandartPassengers", new object[] {
                        serviseZone,
                        countOfPassengers}, this.UnloadStandartPassengersOperationCompleted, userState);
        }
        
        private void OnUnloadStandartPassengersOperationCompleted(object arg) {
            if ((this.UnloadStandartPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnloadStandartPassengersCompleted(this, new UnloadStandartPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/UnloadVipPassengers", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnloadVipPassengers(MapObject serviseZone, int countOfPassengers) {
            object[] results = this.Invoke("UnloadVipPassengers", new object[] {
                        serviseZone,
                        countOfPassengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnloadVipPassengersAsync(MapObject serviseZone, int countOfPassengers) {
            this.UnloadVipPassengersAsync(serviseZone, countOfPassengers, null);
        }
        
        /// <remarks/>
        public void UnloadVipPassengersAsync(MapObject serviseZone, int countOfPassengers, object userState) {
            if ((this.UnloadVipPassengersOperationCompleted == null)) {
                this.UnloadVipPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnloadVipPassengersOperationCompleted);
            }
            this.InvokeAsync("UnloadVipPassengers", new object[] {
                        serviseZone,
                        countOfPassengers}, this.UnloadVipPassengersOperationCompleted, userState);
        }
        
        private void OnUnloadVipPassengersOperationCompleted(object arg) {
            if ((this.UnloadVipPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnloadVipPassengersCompleted(this, new UnloadVipPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/LoadCatering", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LoadCatering(MapObject serviseZone, Catering catering) {
            object[] results = this.Invoke("LoadCatering", new object[] {
                        serviseZone,
                        catering});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LoadCateringAsync(MapObject serviseZone, Catering catering) {
            this.LoadCateringAsync(serviseZone, catering, null);
        }
        
        /// <remarks/>
        public void LoadCateringAsync(MapObject serviseZone, Catering catering, object userState) {
            if ((this.LoadCateringOperationCompleted == null)) {
                this.LoadCateringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadCateringOperationCompleted);
            }
            this.InvokeAsync("LoadCatering", new object[] {
                        serviseZone,
                        catering}, this.LoadCateringOperationCompleted, userState);
        }
        
        private void OnLoadCateringOperationCompleted(object arg) {
            if ((this.LoadCateringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadCateringCompleted(this, new LoadCateringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/FollowMe", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FollowMe(System.Guid planeId) {
            object[] results = this.Invoke("FollowMe", new object[] {
                        planeId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FollowMeAsync(System.Guid planeId) {
            this.FollowMeAsync(planeId, null);
        }
        
        /// <remarks/>
        public void FollowMeAsync(System.Guid planeId, object userState) {
            if ((this.FollowMeOperationCompleted == null)) {
                this.FollowMeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFollowMeOperationCompleted);
            }
            this.InvokeAsync("FollowMe", new object[] {
                        planeId}, this.FollowMeOperationCompleted, userState);
        }
        
        private void OnFollowMeOperationCompleted(object arg) {
            if ((this.FollowMeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FollowMeCompleted(this, new FollowMeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/DoStep", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoStep(System.Guid planeId, CoordinateTuple step) {
            object[] results = this.Invoke("DoStep", new object[] {
                        planeId,
                        step});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoStepAsync(System.Guid planeId, CoordinateTuple step) {
            this.DoStepAsync(planeId, step, null);
        }
        
        /// <remarks/>
        public void DoStepAsync(System.Guid planeId, CoordinateTuple step, object userState) {
            if ((this.DoStepOperationCompleted == null)) {
                this.DoStepOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoStepOperationCompleted);
            }
            this.InvokeAsync("DoStep", new object[] {
                        planeId,
                        step}, this.DoStepOperationCompleted, userState);
        }
        
        private void OnDoStepOperationCompleted(object arg) {
            if ((this.DoStepCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoStepCompleted(this, new DoStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/FollowMeComplete", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FollowMeComplete(System.Guid planeId) {
            object[] results = this.Invoke("FollowMeComplete", new object[] {
                        planeId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FollowMeCompleteAsync(System.Guid planeId) {
            this.FollowMeCompleteAsync(planeId, null);
        }
        
        /// <remarks/>
        public void FollowMeCompleteAsync(System.Guid planeId, object userState) {
            if ((this.FollowMeCompleteOperationCompleted == null)) {
                this.FollowMeCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFollowMeCompleteOperationCompleted);
            }
            this.InvokeAsync("FollowMeComplete", new object[] {
                        planeId}, this.FollowMeCompleteOperationCompleted, userState);
        }
        
        private void OnFollowMeCompleteOperationCompleted(object arg) {
            if ((this.FollowMeCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FollowMeCompleteCompleted(this, new FollowMeCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/Douched", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Douched(MapObject serviсeZone) {
            object[] results = this.Invoke("Douched", new object[] {
                        serviсeZone});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DouchedAsync(MapObject serviсeZone) {
            this.DouchedAsync(serviсeZone, null);
        }
        
        /// <remarks/>
        public void DouchedAsync(MapObject serviсeZone, object userState) {
            if ((this.DouchedOperationCompleted == null)) {
                this.DouchedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDouchedOperationCompleted);
            }
            this.InvokeAsync("Douched", new object[] {
                        serviсeZone}, this.DouchedOperationCompleted, userState);
        }
        
        private void OnDouchedOperationCompleted(object arg) {
            if ((this.DouchedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DouchedCompleted(this, new DouchedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public enum PlaneType {
        
        /// <remarks/>
        Airbus,
        
        /// <remarks/>
        Jet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class Plane {
        
        private System.Guid idField;
        
        private string nameField;
        
        private Flight flightField;
        
        private PlaneState stateField;
        
        private PlaneType typeField;
        
        private int fuelNeedField;
        
        private int currentStandartPassengersField;
        
        private int currentVipPassengersField;
        
        private int currentBaggageField;
        
        private int currentCateringField;
        
        private bool hasArrivalPassengersField;
        
        private MapObject serviceZoneField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public Flight Flight {
            get {
                return this.flightField;
            }
            set {
                this.flightField = value;
            }
        }
        
        /// <remarks/>
        public PlaneState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public PlaneType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int FuelNeed {
            get {
                return this.fuelNeedField;
            }
            set {
                this.fuelNeedField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentStandartPassengers {
            get {
                return this.currentStandartPassengersField;
            }
            set {
                this.currentStandartPassengersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentVipPassengers {
            get {
                return this.currentVipPassengersField;
            }
            set {
                this.currentVipPassengersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentBaggage {
            get {
                return this.currentBaggageField;
            }
            set {
                this.currentBaggageField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentCatering {
            get {
                return this.currentCateringField;
            }
            set {
                this.currentCateringField = value;
            }
        }
        
        /// <remarks/>
        public bool HasArrivalPassengers {
            get {
                return this.hasArrivalPassengersField;
            }
            set {
                this.hasArrivalPassengersField = value;
            }
        }
        
        /// <remarks/>
        public MapObject ServiceZone {
            get {
                return this.serviceZoneField;
            }
            set {
                this.serviceZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Flight {
        
        private System.Guid numberField;
        
        private Cities cityField;
        
        private System.DateTime arrivalTimeField;
        
        private System.DateTime takeoffTimeField;
        
        private System.DateTime startRegistrationTimeField;
        
        private System.DateTime endRegistrationTimeField;
        
        private int economPassengersCountField;
        
        private int vipPassengersCountField;
        
        private System.Nullable<System.Guid> bindPlaneIDField;
        
        private bool isReadyTakeOffField;
        
        /// <remarks/>
        public System.Guid number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        public Cities city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime arrivalTime {
            get {
                return this.arrivalTimeField;
            }
            set {
                this.arrivalTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime takeoffTime {
            get {
                return this.takeoffTimeField;
            }
            set {
                this.takeoffTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartRegistrationTime {
            get {
                return this.startRegistrationTimeField;
            }
            set {
                this.startRegistrationTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndRegistrationTime {
            get {
                return this.endRegistrationTimeField;
            }
            set {
                this.endRegistrationTimeField = value;
            }
        }
        
        /// <remarks/>
        public int EconomPassengersCount {
            get {
                return this.economPassengersCountField;
            }
            set {
                this.economPassengersCountField = value;
            }
        }
        
        /// <remarks/>
        public int VipPassengersCount {
            get {
                return this.vipPassengersCountField;
            }
            set {
                this.vipPassengersCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> BindPlaneID {
            get {
                return this.bindPlaneIDField;
            }
            set {
                this.bindPlaneIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsReadyTakeOff {
            get {
                return this.isReadyTakeOffField;
            }
            set {
                this.isReadyTakeOffField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum Cities {
        
        /// <remarks/>
        Tokyo,
        
        /// <remarks/>
        Paris,
        
        /// <remarks/>
        Rome,
        
        /// <remarks/>
        NewYork,
        
        /// <remarks/>
        Sydney,
        
        /// <remarks/>
        Brasilia,
        
        /// <remarks/>
        Antananarivo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Airport")]
    public partial class CoordinateTuple {
        
        private int xField;
        
        private int yField;
        
        /// <remarks/>
        public int X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        public int Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class Catering {
        
        private int defaultField;
        
        private int childrenField;
        
        private int diabeticField;
        
        private int lowCalorieField;
        
        private int vegetarianField;
        
        /// <remarks/>
        public int Default {
            get {
                return this.defaultField;
            }
            set {
                this.defaultField = value;
            }
        }
        
        /// <remarks/>
        public int Children {
            get {
                return this.childrenField;
            }
            set {
                this.childrenField = value;
            }
        }
        
        /// <remarks/>
        public int Diabetic {
            get {
                return this.diabeticField;
            }
            set {
                this.diabeticField = value;
            }
        }
        
        /// <remarks/>
        public int LowCalorie {
            get {
                return this.lowCalorieField;
            }
            set {
                this.lowCalorieField = value;
            }
        }
        
        /// <remarks/>
        public int Vegetarian {
            get {
                return this.vegetarianField;
            }
            set {
                this.vegetarianField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Airport")]
    public partial class MapObject {
        
        private MapObjectType mapObjectTypeField;
        
        private int numberField;
        
        /// <remarks/>
        public MapObjectType MapObjectType {
            get {
                return this.mapObjectTypeField;
            }
            set {
                this.mapObjectTypeField = value;
            }
        }
        
        /// <remarks/>
        public int Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Airport")]
    public enum MapObjectType {
        
        /// <remarks/>
        Runway,
        
        /// <remarks/>
        Garage,
        
        /// <remarks/>
        ServiceArea,
        
        /// <remarks/>
        Airport,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public enum PlaneState {
        
        /// <remarks/>
        Arrival,
        
        /// <remarks/>
        Landing,
        
        /// <remarks/>
        TaxingToServiceArea,
        
        /// <remarks/>
        OnService,
        
        /// <remarks/>
        TaxingToRunway,
        
        /// <remarks/>
        Departed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateNewPlaneCompletedEventHandler(object sender, CreateNewPlaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewPlaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewPlaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllPlanesCompletedEventHandler(object sender, GetAllPlanesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPlanesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPlanesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Plane[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Plane[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void BindPlaneToFlightCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnloadBaggageCompletedEventHandler(object sender, UnloadBaggageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnloadBaggageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnloadBaggageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadBaggageCompletedEventHandler(object sender, LoadBaggageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadBaggageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadBaggageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadStandartPassengersCompletedEventHandler(object sender, LoadStandartPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadStandartPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadStandartPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadVipPassengersCompletedEventHandler(object sender, LoadVipPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadVipPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadVipPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnloadStandartPassengersCompletedEventHandler(object sender, UnloadStandartPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnloadStandartPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnloadStandartPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UnloadVipPassengersCompletedEventHandler(object sender, UnloadVipPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnloadVipPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnloadVipPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LoadCateringCompletedEventHandler(object sender, LoadCateringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadCateringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadCateringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FollowMeCompletedEventHandler(object sender, FollowMeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FollowMeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FollowMeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DoStepCompletedEventHandler(object sender, DoStepCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoStepCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoStepCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FollowMeCompleteCompletedEventHandler(object sender, FollowMeCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FollowMeCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FollowMeCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DouchedCompletedEventHandler(object sender, DouchedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DouchedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DouchedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591