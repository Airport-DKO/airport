//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace VIPShuttle.AircraftgeneratorVS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AircraftGeneratorSoap", Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class AircraftGenerator : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateNewPlaneOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPlanesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInPassengersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AircraftGenerator() {
            this.Url = global::VIPShuttle.Properties.Settings.Default.VIPShuttle_AircraftgeneratorVS_AircraftGenerator;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateNewPlaneCompletedEventHandler CreateNewPlaneCompleted;
        
        /// <remarks/>
        public event GetAllPlanesCompletedEventHandler GetAllPlanesCompleted;
        
        /// <remarks/>
        public event CheckInPassengersCompletedEventHandler CheckInPassengersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/CreateNewPlane", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateNewPlane(string name, PlaneType type, int fuelNeed, int maxStandartPassengers, int maxVipPassengers, bool hasArrivalPassengers) {
            object[] results = this.Invoke("CreateNewPlane", new object[] {
                        name,
                        type,
                        fuelNeed,
                        maxStandartPassengers,
                        maxVipPassengers,
                        hasArrivalPassengers});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewPlaneAsync(string name, PlaneType type, int fuelNeed, int maxStandartPassengers, int maxVipPassengers, bool hasArrivalPassengers) {
            this.CreateNewPlaneAsync(name, type, fuelNeed, maxStandartPassengers, maxVipPassengers, hasArrivalPassengers, null);
        }
        
        /// <remarks/>
        public void CreateNewPlaneAsync(string name, PlaneType type, int fuelNeed, int maxStandartPassengers, int maxVipPassengers, bool hasArrivalPassengers, object userState) {
            if ((this.CreateNewPlaneOperationCompleted == null)) {
                this.CreateNewPlaneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewPlaneOperationCompleted);
            }
            this.InvokeAsync("CreateNewPlane", new object[] {
                        name,
                        type,
                        fuelNeed,
                        maxStandartPassengers,
                        maxVipPassengers,
                        hasArrivalPassengers}, this.CreateNewPlaneOperationCompleted, userState);
        }
        
        private void OnCreateNewPlaneOperationCompleted(object arg) {
            if ((this.CreateNewPlaneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewPlaneCompleted(this, new CreateNewPlaneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/GetAllPlanes", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Plane[] GetAllPlanes() {
            object[] results = this.Invoke("GetAllPlanes", new object[0]);
            return ((Plane[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPlanesAsync() {
            this.GetAllPlanesAsync(null);
        }
        
        /// <remarks/>
        public void GetAllPlanesAsync(object userState) {
            if ((this.GetAllPlanesOperationCompleted == null)) {
                this.GetAllPlanesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPlanesOperationCompleted);
            }
            this.InvokeAsync("GetAllPlanes", new object[0], this.GetAllPlanesOperationCompleted, userState);
        }
        
        private void OnGetAllPlanesOperationCompleted(object arg) {
            if ((this.GetAllPlanesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPlanesCompleted(this, new GetAllPlanesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("DKO-Ariport-Aircraft-Generator/CheckInPassengers", RequestNamespace="DKO-Ariport-Aircraft-Generator", ResponseNamespace="DKO-Ariport-Aircraft-Generator", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckInPassengers(System.Guid[] passengersList) {
            object[] results = this.Invoke("CheckInPassengers", new object[] {
                        passengersList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInPassengersAsync(System.Guid[] passengersList) {
            this.CheckInPassengersAsync(passengersList, null);
        }
        
        /// <remarks/>
        public void CheckInPassengersAsync(System.Guid[] passengersList, object userState) {
            if ((this.CheckInPassengersOperationCompleted == null)) {
                this.CheckInPassengersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInPassengersOperationCompleted);
            }
            this.InvokeAsync("CheckInPassengers", new object[] {
                        passengersList}, this.CheckInPassengersOperationCompleted, userState);
        }
        
        private void OnCheckInPassengersOperationCompleted(object arg) {
            if ((this.CheckInPassengersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInPassengersCompleted(this, new CheckInPassengersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public enum PlaneType {
        
        /// <remarks/>
        Airbus,
        
        /// <remarks/>
        Jet,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class Plane {
        
        private System.Guid idField;
        
        private string nameField;
        
        private Flight flightField;
        
        private PlaneState stateField;
        
        private PlaneType typeField;
        
        private int fuelNeedField;
        
        private int maxStandartPassengersField;
        
        private int maxVipPassengersField;
        
        private bool hasArrivalPassengersField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public Flight Flight {
            get {
                return this.flightField;
            }
            set {
                this.flightField = value;
            }
        }
        
        /// <remarks/>
        public PlaneState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public PlaneType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public int FuelNeed {
            get {
                return this.fuelNeedField;
            }
            set {
                this.fuelNeedField = value;
            }
        }
        
        /// <remarks/>
        public int MaxStandartPassengers {
            get {
                return this.maxStandartPassengersField;
            }
            set {
                this.maxStandartPassengersField = value;
            }
        }
        
        /// <remarks/>
        public int MaxVipPassengers {
            get {
                return this.maxVipPassengersField;
            }
            set {
                this.maxVipPassengersField = value;
            }
        }
        
        /// <remarks/>
        public bool HasArrivalPassengers {
            get {
                return this.hasArrivalPassengersField;
            }
            set {
                this.hasArrivalPassengersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public partial class Flight {
        
        private int flightNumberField;
        
        private City cityField;
        
        private System.DateTime arrivalTimeField;
        
        private System.DateTime departureTimeField;
        
        /// <remarks/>
        public int FlightNumber {
            get {
                return this.flightNumberField;
            }
            set {
                this.flightNumberField = value;
            }
        }
        
        /// <remarks/>
        public City City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ArrivalTime {
            get {
                return this.arrivalTimeField;
            }
            set {
                this.arrivalTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DepartureTime {
            get {
                return this.departureTimeField;
            }
            set {
                this.departureTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public enum City {
        
        /// <remarks/>
        Tokyo,
        
        /// <remarks/>
        Paris,
        
        /// <remarks/>
        Rome,
        
        /// <remarks/>
        NewYork,
        
        /// <remarks/>
        Sydney,
        
        /// <remarks/>
        Brasilia,
        
        /// <remarks/>
        Antananarivo,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="DKO-Ariport-Aircraft-Generator")]
    public enum PlaneState {
        
        /// <remarks/>
        Arrival,
        
        /// <remarks/>
        Landing,
        
        /// <remarks/>
        TaxingToServiceArea,
        
        /// <remarks/>
        OnService,
        
        /// <remarks/>
        TaxingToRunway,
        
        /// <remarks/>
        Departed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CreateNewPlaneCompletedEventHandler(object sender, CreateNewPlaneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewPlaneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewPlaneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllPlanesCompletedEventHandler(object sender, GetAllPlanesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPlanesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPlanesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Plane[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Plane[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckInPassengersCompletedEventHandler(object sender, CheckInPassengersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInPassengersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInPassengersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591