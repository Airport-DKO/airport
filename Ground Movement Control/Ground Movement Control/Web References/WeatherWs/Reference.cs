//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace Ground_Movement_Control.WeatherWs {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WebServiceWeatherSoap", Namespace="http://tempuri.org/")]
    public partial class WebServiceWeather : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetTemperatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTemperatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTempFromCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWindFromCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFinishConditionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FinishedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWindOperationCompleted;
        
        private System.Threading.SendOrPostCallback CrapSnowOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WebServiceWeather() {
            this.Url = global::Ground_Movement_Control.Properties.Settings.Default.Ground_Movement_Control_WeatherWs_WebServiceWeather;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetTemperatureCompletedEventHandler GetTemperatureCompleted;
        
        /// <remarks/>
        public event SetTemperatureCompletedEventHandler SetTemperatureCompleted;
        
        /// <remarks/>
        public event GetTempFromCityCompletedEventHandler GetTempFromCityCompleted;
        
        /// <remarks/>
        public event GetWindFromCityCompletedEventHandler GetWindFromCityCompleted;
        
        /// <remarks/>
        public event GetFinishConditionCompletedEventHandler GetFinishConditionCompleted;
        
        /// <remarks/>
        public event FinishedCompletedEventHandler FinishedCompleted;
        
        /// <remarks/>
        public event SetWindCompletedEventHandler SetWindCompleted;
        
        /// <remarks/>
        public event CrapSnowCompletedEventHandler CrapSnowCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTemperature", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetTemperature(bool gui) {
            object[] results = this.Invoke("GetTemperature", new object[] {
                        gui});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemperatureAsync(bool gui) {
            this.GetTemperatureAsync(gui, null);
        }
        
        /// <remarks/>
        public void GetTemperatureAsync(bool gui, object userState) {
            if ((this.GetTemperatureOperationCompleted == null)) {
                this.GetTemperatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemperatureOperationCompleted);
            }
            this.InvokeAsync("GetTemperature", new object[] {
                        gui}, this.GetTemperatureOperationCompleted, userState);
        }
        
        private void OnGetTemperatureOperationCompleted(object arg) {
            if ((this.GetTemperatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemperatureCompleted(this, new GetTemperatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTemperature", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetTemperature(double t) {
            this.Invoke("SetTemperature", new object[] {
                        t});
        }
        
        /// <remarks/>
        public void SetTemperatureAsync(double t) {
            this.SetTemperatureAsync(t, null);
        }
        
        /// <remarks/>
        public void SetTemperatureAsync(double t, object userState) {
            if ((this.SetTemperatureOperationCompleted == null)) {
                this.SetTemperatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTemperatureOperationCompleted);
            }
            this.InvokeAsync("SetTemperature", new object[] {
                        t}, this.SetTemperatureOperationCompleted, userState);
        }
        
        private void OnSetTemperatureOperationCompleted(object arg) {
            if ((this.SetTemperatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTemperatureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTempFromCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetTempFromCity(string city) {
            object[] results = this.Invoke("GetTempFromCity", new object[] {
                        city});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetTempFromCityAsync(string city) {
            this.GetTempFromCityAsync(city, null);
        }
        
        /// <remarks/>
        public void GetTempFromCityAsync(string city, object userState) {
            if ((this.GetTempFromCityOperationCompleted == null)) {
                this.GetTempFromCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTempFromCityOperationCompleted);
            }
            this.InvokeAsync("GetTempFromCity", new object[] {
                        city}, this.GetTempFromCityOperationCompleted, userState);
        }
        
        private void OnGetTempFromCityOperationCompleted(object arg) {
            if ((this.GetTempFromCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTempFromCityCompleted(this, new GetTempFromCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWindFromCity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetWindFromCity(string city) {
            object[] results = this.Invoke("GetWindFromCity", new object[] {
                        city});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetWindFromCityAsync(string city) {
            this.GetWindFromCityAsync(city, null);
        }
        
        /// <remarks/>
        public void GetWindFromCityAsync(string city, object userState) {
            if ((this.GetWindFromCityOperationCompleted == null)) {
                this.GetWindFromCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWindFromCityOperationCompleted);
            }
            this.InvokeAsync("GetWindFromCity", new object[] {
                        city}, this.GetWindFromCityOperationCompleted, userState);
        }
        
        private void OnGetWindFromCityOperationCompleted(object arg) {
            if ((this.GetWindFromCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWindFromCityCompleted(this, new GetWindFromCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFinishCondition", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetFinishCondition() {
            object[] results = this.Invoke("GetFinishCondition", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetFinishConditionAsync() {
            this.GetFinishConditionAsync(null);
        }
        
        /// <remarks/>
        public void GetFinishConditionAsync(object userState) {
            if ((this.GetFinishConditionOperationCompleted == null)) {
                this.GetFinishConditionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFinishConditionOperationCompleted);
            }
            this.InvokeAsync("GetFinishCondition", new object[0], this.GetFinishConditionOperationCompleted, userState);
        }
        
        private void OnGetFinishConditionOperationCompleted(object arg) {
            if ((this.GetFinishConditionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFinishConditionCompleted(this, new GetFinishConditionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Finished", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Finished() {
            this.Invoke("Finished", new object[0]);
        }
        
        /// <remarks/>
        public void FinishedAsync() {
            this.FinishedAsync(null);
        }
        
        /// <remarks/>
        public void FinishedAsync(object userState) {
            if ((this.FinishedOperationCompleted == null)) {
                this.FinishedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFinishedOperationCompleted);
            }
            this.InvokeAsync("Finished", new object[0], this.FinishedOperationCompleted, userState);
        }
        
        private void OnFinishedOperationCompleted(object arg) {
            if ((this.FinishedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FinishedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetWind", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetWind(string city, int wind) {
            this.Invoke("SetWind", new object[] {
                        city,
                        wind});
        }
        
        /// <remarks/>
        public void SetWindAsync(string city, int wind) {
            this.SetWindAsync(city, wind, null);
        }
        
        /// <remarks/>
        public void SetWindAsync(string city, int wind, object userState) {
            if ((this.SetWindOperationCompleted == null)) {
                this.SetWindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWindOperationCompleted);
            }
            this.InvokeAsync("SetWind", new object[] {
                        city,
                        wind}, this.SetWindOperationCompleted, userState);
        }
        
        private void OnSetWindOperationCompleted(object arg) {
            if ((this.SetWindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWindCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CrapSnow", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CrapSnow() {
            this.Invoke("CrapSnow", new object[0]);
        }
        
        /// <remarks/>
        public void CrapSnowAsync() {
            this.CrapSnowAsync(null);
        }
        
        /// <remarks/>
        public void CrapSnowAsync(object userState) {
            if ((this.CrapSnowOperationCompleted == null)) {
                this.CrapSnowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCrapSnowOperationCompleted);
            }
            this.InvokeAsync("CrapSnow", new object[0], this.CrapSnowOperationCompleted, userState);
        }
        
        private void OnCrapSnowOperationCompleted(object arg) {
            if ((this.CrapSnowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CrapSnowCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTemperatureCompletedEventHandler(object sender, GetTemperatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemperatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemperatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetTemperatureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetTempFromCityCompletedEventHandler(object sender, GetTempFromCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTempFromCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTempFromCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetWindFromCityCompletedEventHandler(object sender, GetWindFromCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWindFromCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWindFromCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFinishConditionCompletedEventHandler(object sender, GetFinishConditionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFinishConditionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFinishConditionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void FinishedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void SetWindCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void CrapSnowCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591